import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:credit_hub_app/ui/widgets/add_width_drawal_request/custom_rich_text.dart';
import 'package:credit_hub_app/ui/widgets/add_width_drawal_request/custom_text_field.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../core/constant/app_string.dart';
import '../../../core/constant/constant.dart';
import '../../../data/model/add_without/add_without.dart';
import '../../widgets/add_width_drawal_request/custom_dotted_border_box.dart';
import 'cubit/add_withdrawal_request_cubit.dart';

class AddWithDrawalRequestScreen extends StatefulWidget {
  const AddWithDrawalRequestScreen({super.key});

  @override
  State<AddWithDrawalRequestScreen> createState() =>
      _AddWithDrawalRequestScreenState();
}

class _AddWithDrawalRequestScreenState
    extends State<AddWithDrawalRequestScreen> {
  final TextEditingController _lotNoController = TextEditingController();
  final TextEditingController _moneyRequestController = TextEditingController();
  File? _selectedImage; // ·∫¢nh ƒë√£ ch·ªçn
  String? _uploadedImageName;
  final ImagePicker _picker = ImagePicker();
  bool _isUploading = false; // Tr·∫°ng th√°i ƒëang t·∫£i ·∫£nh l√™n server

  /// ‚úÖ Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán ho·∫∑c ch·ª•p ·∫£nh v√† t·∫£i l√™n server ngay l·∫≠p t·ª©c
  Future<void> _pickImage(ImageSource source) async {
  final pickedFile = await _picker.pickImage(source: source, imageQuality: 80);

  if (pickedFile != null) {
    setState(() {
      _selectedImage = File(pickedFile.path);
    });

    // ‚úÖ G·ªçi API upload ·∫£nh ngay l·∫≠p t·ª©c m√† kh√¥ng hi·ªÉn th·ªã loading
    _uploadImageToServer();
  }
}

  /// ‚úÖ G·ªçi API upload ·∫£nh, nh·∫≠n v·ªÅ URL v√† tr√≠ch xu·∫•t t√™n file
  Future<void> _uploadImageToServer() async {
  if (_selectedImage == null) return;

  try {
    final imageUrl = await context.read<AddWithdrawalRequestCubit>().uploadImage(_selectedImage!);


   if (imageUrl != null && imageUrl.isNotEmpty) {
  Uri uri = Uri.parse(imageUrl);

      String fileName = uri.pathSegments.last;

      setState(() {
        _uploadedImageName = fileName; // ‚úÖ L∆∞u t√™n file ƒë·ªÉ g·ª≠i l√™n API
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("üì∑ ·∫¢nh ƒë√£ t·∫£i l√™n th√†nh c√¥ng: $_uploadedImageName")),
      );
    }
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("‚ùå L·ªói upload ·∫£nh: $e")),
    );
  }
}

  /// ‚úÖ G·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn l√™n server
  void _submitRequest() {
    final lotNo = _lotNoController.text.trim();
    final moneyRequest =
        double.tryParse(_moneyRequestController.text.trim()) ?? 0.0;

    if (lotNo.isEmpty || moneyRequest <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá!")),
      );
      return;
    }

    setState(() {
      _isUploading = true; // ‚úÖ B·∫Øt ƒë·∫ßu loading khi g·ª≠i request
    });

    final request = AddWithout(
      lot_no: lotNo,
      money_request: moneyRequest,
      image_link: _uploadedImageName ?? "", // ‚úÖ G·ª≠i URL ·∫£nh
    );

    context.read<AddWithdrawalRequestCubit>().addWithdrawalRequest(
          requestItem: request,
        );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        toolbarHeight: 25,
        centerTitle: true,
        title: const Text(
          textAddWithdrawal,
          style: TextStyle(
              fontWeight: FontWeight.w400, fontSize: 18, color: Colors.black),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      body: BlocListener<AddWithdrawalRequestCubit, AddWithdrawalRequestState>(
        listener: (context, state) {
          if (state is Loading) {
            showDialog(
              context: context,
              barrierDismissible: false,
              builder: (_) => const Center(child: CircularProgressIndicator()),
            );
          } else if (state is Success) {
            Navigator.pop(context);
            setState(() {
              _isUploading = false; // ‚úÖ D·ª´ng loading khi th√†nh c√¥ng
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text("‚úÖ G·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn th√†nh c√¥ng!")),
              
            );
          } else if (state is Failure) {
            Navigator.pop(context);
            setState(() {
              _isUploading = false; // ‚úÖ D·ª´ng loading khi l·ªói x·∫£y ra
            });
            // ScaffoldMessenger.of(context).showSnackBar(
            //   SnackBar(content: Text("‚ùå L·ªói: ${state.error}")),
            // );
          }
        },
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              h(20),
              const Row(
                children: [
                  CustomRichText(
                      textTitle: richTextTitleLot, textTitle01: richTextTitle01)
                ],
              ),
              h(10),
              CustomTextField(
                hintText: textHintLot,
                controller: _lotNoController,
              ),
              h(22),
              const Row(
                children: [
                  CustomRichText(
                      textTitle: richTextTitlePrice,
                      textTitle01: richTextTitle01)
                ],
              ),
              h(10),
              CustomTextField(
                hintText: textHintPrice,
                controller: _moneyRequestController,
              ),
              h(22),
              const Row(
                children: [
                  CustomRichText(
                      textTitle: richTextImage, textTitle01: richTextTitle01)
                ],
              ),
              h(22),
              GestureDetector(
                onTap: () => _showImagePickerOptions(),
                child: _isUploading
                    ? const Center(
                        child:
                            CircularProgressIndicator()) // ‚úÖ Hi·ªÉn th·ªã loading khi ƒëang t·∫£i ·∫£nh
                    : _selectedImage == null
                        ? const DottedBorderBox() // ‚úÖ Hi·ªÉn th·ªã n√∫t ch·ªçn ·∫£nh n·∫øu ch∆∞a ch·ªçn
                        : Image.file(
                            _selectedImage!,
                            height: 150,
                            width: double.infinity,
                            fit: BoxFit.cover,
                          ),
              ),
              h(48),
              SizedBox(
                width: double.infinity,
                height: 65,
                child: ElevatedButton(
                  onPressed: _submitRequest,
                  style: ElevatedButton.styleFrom(
                    primary: const Color(0xFFFF4A4A),
                    padding: const EdgeInsets.symmetric(
                        vertical: 12, horizontal: 20),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(32.5),
                    ),
                  ),
                  child: const Text(
                    "G·ª≠i Y√™u C·∫ßu",
                    style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// ‚úÖ Hi·ªÉn th·ªã l·ª±a ch·ªçn: Ch·ª•p ·∫£nh ho·∫∑c ch·ªçn t·ª´ th∆∞ vi·ªán
  void _showImagePickerOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return SafeArea(
          child: Wrap(
            children: [
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text("Ch·ªçn t·ª´ th∆∞ vi·ªán"),
                onTap: () {
                  Navigator.pop(context);
                  _pickImage(ImageSource.gallery);
                },
              ),
              ListTile(
                leading: const Icon(Icons.camera_alt),
                title: const Text("Ch·ª•p ·∫£nh"),
                onTap: () {
                  Navigator.pop(context);
                  _pickImage(ImageSource.camera);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  void dispose() {
    _lotNoController.dispose();
    _moneyRequestController.dispose();
    super.dispose();
  }
}
