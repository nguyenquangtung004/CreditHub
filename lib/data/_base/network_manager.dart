import 'dart:developer'; // Th∆∞ vi·ªán ghi log
import 'dart:io'; // X·ª≠ l√Ω HTTP v√† ch·ª©ng ch·ªâ
import 'package:dio/dio.dart'; // HTTP Client
import 'package:dio/io.dart'; // H·ªó tr·ª£ tr√™n n·ªÅn t·∫£ng I/O
import 'package:flutter/foundation.dart'; // C√¥ng c·ª• ph√°t tri·ªÉn
import 'package:get/get.dart' as g; // GetX qu·∫£n l√Ω tr·∫°ng th√°i
import 'package:pretty_dio_logger/pretty_dio_logger.dart'; // Ghi log ƒë·∫πp m·∫Øt

import '../../core/config/app_config.dart'; // Config ·ª©ng d·ª•ng
import '../../shared/app_manager.dart'; // Qu·∫£n l√Ω token v√† tr·∫°ng th√°i

// ===================== NetworkManager =====================
class NetworkManager {
  final String proxy = AppConfig.proxy; // Proxy d√πng cho debug

  // C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho Dio
  BaseOptions opts = BaseOptions(
    baseUrl: AppConfig.url, // ƒê·ªãa ch·ªâ URL API
    contentType: 'application/json', // ƒê·ªãnh d·∫°ng JSON
    connectTimeout: const Duration(seconds: 30), // Timeout k·∫øt n·ªëi
    receiveTimeout: const Duration(seconds: 30), // Timeout ph·∫£n h·ªìi
  );

  // T·∫°o m·ªôt instance c·ªßa Dio
  Dio createDio() {
    final dio = Dio(opts);
    dio.addInterceptors(); // Th√™m Interceptor
    return dio;
  }

  // T·∫°o instance Dio v·ªõi c·∫•u h√¨nh t√πy ch·ªânh (n·∫øu c·∫ßn)
  Dio createDioWith(BaseOptions customOptions) {
    final dio = Dio(customOptions);
    dio.addInterceptors(); // Th√™m Interceptor

    // Th√™m proxy cho ch·∫ø ƒë·ªô debug
    if (kDebugMode && proxy.isNotEmpty) {
      dio.httpClientAdapter = IOHttpClientAdapter(
        createHttpClient: () {
          final client = HttpClient();
          client.findProxy = (uri) => 'PROXY $proxy';
          client.badCertificateCallback = (cert, host, port) => true;
          return client;
        },
      );
    }
    return dio;
  }
}

// ===================== Extension for Dio =====================
extension AppDioExtension on Dio {
  // Th√™m Interceptor cho Dio
  Dio addInterceptors() {
    return this
      ..interceptors.add(PrettyDioLogger(
        requestBody: true,
        requestHeader: true,
      ))
      ..interceptors.add(InterceptorsWrapper(
        onRequest: _requestInterceptor,
        onResponse: _responseInterceptor,
        onError: _errorInterceptor,
      ));
  }

  // Interceptor x·ª≠ l√Ω tr∆∞·ªõc khi g·ª≠i request
  Future<void> _requestInterceptor(RequestOptions options, RequestInterceptorHandler handler) async {
    try {
      final token = await g.Get.find<AppManager>().getToken();
      if (token != null && token.isNotEmpty) {
        options.headers['Authorization'] = 'Bearer $token';
        log('üîë [Request] Token added: $token');
      }
      handler.next(options); // Ti·∫øp t·ª•c request
    } catch (e) {
      log('‚ùå [Request Interceptor Error]: $e');
      handler.next(options);
    }
  }

  // Interceptor x·ª≠ l√Ω khi nh·∫≠n response
  Future<void> _responseInterceptor(Response response, ResponseInterceptorHandler handler) async {
    log('‚úÖ [Response] Status Code: ${response.statusCode}');
    handler.next(response); // Ti·∫øp t·ª•c x·ª≠ l√Ω response
  }

  // Interceptor x·ª≠ l√Ω l·ªói
  Future<void> _errorInterceptor(DioException error, ErrorInterceptorHandler handler) async {
    try {
      final isSignedIn = await g.Get.find<AppManager>().getSignedInStatus();

      // Ki·ªÉm tra l·ªói 401 (Token h·∫øt h·∫°n)
      if (error.response?.statusCode == 401 && isSignedIn) {
        log("‚ö†Ô∏è [401] Token expired. Logging out...");
        await g.Get.find<AppManager>().logout();
        g.Get.offAllNamed('/login'); // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      } else {
        handler.next(error); // Ti·∫øp t·ª•c x·ª≠ l√Ω l·ªói kh√°c
      }
    } catch (e) {
      log('‚ùå [Error Interceptor Error]: $e');
      handler.next(error);
    }
  }
}
