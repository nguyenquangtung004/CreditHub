import 'package:credit_hub_app/data/repository/home/home_rep.dart'; // Nh·∫≠p interface DataRepository cho Home
import 'package:flutter/material.dart'; // Nh·∫≠p th∆∞ vi·ªán Material Design c·ªßa Flutter
import 'package:flutter_bloc/flutter_bloc.dart'; // Nh·∫≠p th∆∞ vi·ªán flutter_bloc ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i
import 'package:flutter_dotenv/flutter_dotenv.dart'; // Nh·∫≠p th∆∞ vi·ªán flutter_dotenv ƒë·ªÉ ƒë·ªçc bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
import 'package:get/get.dart'; // Nh·∫≠p th∆∞ vi·ªán GetX cho dependency injection v√† c√°c ti·ªán √≠ch kh√°c

import 'core/constant/constant.dart'; // Nh·∫≠p file constant.dart ch·ª©a c√°c h·∫±ng s·ªë
import 'core/utils/dependencies.dart'; // Nh·∫≠p file dependencies.dart ƒë·ªÉ c·∫•u h√¨nh dependency injection
import 'data/_base/network_manager.dart'; // Nh·∫≠p NetworkManager ƒë·ªÉ qu·∫£n l√Ω network requests
import 'data/repository/forgot_password/forgot_password_rep.dart'; // Nh·∫≠p interface ForgotPasswordRepo
import 'data/repository/forgot_password/forgot_password_rep_impl.dart'; // Nh·∫≠p implementation ForgotPasswordRepoImpl
import 'data/repository/home/home_rep_impl.dart'; // Nh·∫≠p implementation DataRepositoryImpl cho Home
import 'data/repository/otp/otp_repo.dart'; // Nh·∫≠p interface OtpRepository
import 'data/repository/otp/otp_repo_impl.dart'; // Nh·∫≠p implementation OtpRepositoryImpl
import 'data/service/forgot_password/forgot_password_service.dart'; // Nh·∫≠p service ForgotPassWordService
import 'data/service/home/home_service.dart'; // Nh·∫≠p service HomeService
import 'data/service/otp/otp_service.dart'; // Nh·∫≠p service OtpService
import 'shared/app_manager.dart'; // Nh·∫≠p AppManager ƒë·ªÉ qu·∫£n l√Ω c√°c th√¥ng tin to√†n c·ª•c c·ªßa ·ª©ng d·ª•ng
import 'shared/app_route.dart'; // Nh·∫≠p AppRoute ƒë·ªÉ qu·∫£n l√Ω routing c·ªßa ·ª©ng d·ª•ng
import 'ui/screens/forgot_password/cubit/forgot_password_cubit.dart'; // Nh·∫≠p Cubit ForgotPasswordCubit
import 'ui/screens/home/cubit/home_cubit.dart'; // Nh·∫≠p Cubit HomeCubit
import 'ui/screens/otp/cubit/otp_cubit.dart'; // Nh·∫≠p Cubit OtpCubit
import 'ui/screens/request/cubit/request_cubit.dart';
import 'ui/screens/sign_in/sign_in.dart'; // Nh·∫≠p m√†n h√¨nh SignInScreen

// üî• TH√äM C√ÅC IMPORT LI√äN QUAN ƒê·∫æN `RequestCubit`
import 'data/repository/request/request_repo.dart'; 
import 'data/repository/request/request_repo_impl.dart';
import 'data/service/request/request_service.dart';

/// üìå **H√†m main - ƒêi·ªÉm kh·ªüi ch·∫°y ·ª©ng d·ª•ng**
Future<void> main() async {
  // ‚úÖ Kh·ªüi t·∫°o Flutter binding
  WidgetsFlutterBinding.ensureInitialized();

  try {
    // ‚úÖ T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
    await dotenv.load(fileName: ".env");
    print("üìå .env ƒë√£ t·∫£i th√†nh c√¥ng!");
  } catch (e) {
    print("‚ùå L·ªói khi t·∫£i .env: $e");
  }

  // ‚úÖ C·∫•u h√¨nh Dependency Injection (DI) v·ªõi GetX
  provideDependencies();
  final GlobalManager _globalManager = Get.find();

  // ‚úÖ Kh·ªüi t·∫°o Dio (HTTP client)
  final dio = NetworkManager().createDio().addInterceptors();

  // üî• Ch·∫°y ·ª©ng d·ª•ng
  runApp(
    MultiRepositoryProvider(
      providers: [
        RepositoryProvider<AppManager>(create: (context) => AppManager()),

        /// ‚úÖ **C·∫•u h√¨nh Service**
        RepositoryProvider<HomeService>(create: (context) => HomeService(dio)),
        RepositoryProvider<ForgotPassWordService>(create: (context) => ForgotPassWordService(dio)),
        RepositoryProvider<OtpService>(create: (context) => OtpService(dio)),
        RepositoryProvider<RequestService>(create: (context) => RequestService(dio)), // üî• Th√™m RequestService

        /// ‚úÖ **C·∫•u h√¨nh Repository**
        RepositoryProvider<DataRepository>(
          create: (context) => DataRepositoryImpl(homeService: context.read<HomeService>()),
        ),
        RepositoryProvider<ForgotPasswordRepo>(
          create: (context) => ForgotPasswordRepoImpl(context.read<ForgotPassWordService>()),
        ),
        RepositoryProvider<OtpRepository>(
          create: (context) => OtpRepositoryImpl(context.read<OtpService>()),
        ),
        RepositoryProvider<RequestRepo>(
          create: (context) => RequestRepoImpl(requestService: context.read<RequestService>()), // üî• Th√™m RequestRepo
        ),
      ],
      child: MultiBlocProvider(
        providers: [
          /// ‚úÖ **C·∫•u h√¨nh Cubit**
          BlocProvider<HomeCubit>(
            create: (context) => HomeCubit(dataRepository: context.read<DataRepository>())..fetchHomeData(),
          ),
          BlocProvider<ForgotPasswordCubit>(
            create: (context) => ForgotPasswordCubit(context.read<ForgotPasswordRepo>()),
          ),
          BlocProvider<OtpCubit>(
            create: (context) => OtpCubit(context.read<OtpRepository>()),
          ),
          BlocProvider<RequestCubit>(
            create: (context) => RequestCubit(context.read<RequestRepo>()), // üî• Th√™m RequestCubit
          ),
        ],
        child: GetMaterialApp(
          debugShowCheckedModeBanner: false,
          home: SignInScreen(),
          navigatorKey: _globalManager.navigatorKey,
          initialRoute: AppRoute.signIn.name,
          onGenerateRoute: AppRouteExt.generateRoute,
        ),
      ),
    ),
  );
}
